---
- name: Ensure ca-certificates are installed
  dnf:
    name: ca-certificates
    state: present

- name: Install Grafana dependencies
  dnf:
    name:
      - fontconfig
      - freetype
      - urw-fonts
    state: present

- name: Clean dnf cache
  dnf:
    name: "*"
    state: latest
    update_cache: yes

- name: Download Grafana RPM package
  get_url:
    url: https://dl.grafana.com/oss/release/grafana-9.5.1-1.x86_64.rpm
    dest: /tmp/grafana.rpm

- name: Install Grafana RPM package
  dnf:
    name: /tmp/grafana.rpm
    state: present
    disable_gpg_check: yes

- name: Ensure proper permissions on Grafana directories
  file:
    path: /var/lib/grafana
    owner: grafana
    group: grafana
    mode: "0755"
    state: directory
  become: yes

- name: Check if Grafana service exists
  command: systemctl status grafana-server
  register: grafana_service_status
  ignore_errors: yes

- name: Debug Grafana service status
  debug:
    var: grafana_service_status

- name: Ensure Grafana is running and enabled via systemd
  systemd:
    name: grafana-server
    state: started
    enabled: yes
  become: yes
  when: grafana_service_status.rc == 0

# Fallback to manually start the Grafana service
- name: Start Grafana manually if not running via systemd
  command: sudo systemctl start grafana-server
  when: grafana_service_status.rc != 0
  become: yes

- name: Wait for Grafana to be up and running
  wait_for:
    port: 3000
    timeout: 60

- name: Pause for 10 seconds to allow Grafana to fully initialize
  pause:
    seconds: 10

- name: Test Grafana API
  uri:
    url: "http://localhost:3000/api/health"
    method: GET
  register: grafana_health
  retries: 3
  delay: 5
  until: grafana_health.status == 200

- name: Display Grafana health check result
  debug:
    var: grafana_health

- name: Check Grafana service logs
  command: journalctl -u grafana-server --no-pager
  register: grafana_service_logs
  ignore_errors: yes

- name: Display Grafana service logs
  debug:
    var: grafana_service_logs.stdout

- name: Check for Grafana updates
  dnf:
    name: grafana
    state: latest
    update_cache: yes
  check_mode: yes
  register: grafana_update_check

- name: Display update status
  debug:
    msg: "Grafana update is {{ 'available' if grafana_update_check.changed else 'not available' }}"

- name: Confirm Grafana API is accessible
  debug:
    msg: "Grafana API is accessible and functioning correctly"
  when: grafana_health.status == 200
